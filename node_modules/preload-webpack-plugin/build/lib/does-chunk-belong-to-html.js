"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _from = _interopRequireDefault(require("@babel/runtime/core-js/array/from"));

var _set = _interopRequireDefault(require("@babel/runtime/core-js/set"));

var _values = _interopRequireDefault(require("@babel/runtime/core-js/object/values"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function v3(_ref) {
  var chunk = _ref.chunk,
      htmlAssetsChunks = _ref.htmlAssetsChunks,
      _ref$visitedChunks = _ref.visitedChunks,
      visitedChunks = _ref$visitedChunks === void 0 ? {} : _ref$visitedChunks;

  // Prevent circular recursion.
  // See https://github.com/GoogleChromeLabs/preload-webpack-plugin/issues/49
  if (visitedChunks[chunk.renderedHash]) {
    return false;
  }

  visitedChunks[chunk.renderedHash] = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator2.default)(htmlAssetsChunks), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var htmlAssetChunk = _step.value;

      if (htmlAssetChunk.hash === chunk.renderedHash) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = (0, _getIterator2.default)(chunk.parents), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var parent = _step2.value;

      if (v3({
        chunk: parent,
        htmlAssetsChunks,
        visitedChunks
      })) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return false;
}

function v4(_ref2) {
  var chunk = _ref2.chunk,
      htmlAssetsChunks = _ref2.htmlAssetsChunks,
      compilation = _ref2.compilation;
  // Get all the hashes of the HTML assets.
  var rootHashes = (0, _values.default)(htmlAssetsChunks).map(function (_ref3) {
    var hash = _ref3.hash;
    return hash;
  }); // Get a list of chunk groups that contain one of those hashes.

  var rootChunkGroups = compilation.chunkGroups.filter(function (chunkGroup) {
    return chunkGroup.chunks.filter(function (chunk) {
      return rootHashes.includes(chunk.renderedHash);
    });
  }); // Get an id for each of those chunk groups.

  var rootChunkGroupsIds = new _set.default(rootChunkGroups.map(function (_ref4) {
    var id = _ref4.id;
    return id;
  })); // Return true iff the chunk we're passed belongs to a group whose id is in
  // the list of root chunk groups.

  return (0, _from.default)(chunk.groupsIterable).some(function (_ref5) {
    var id = _ref5.id;
    return rootChunkGroupsIds.has(id);
  });
}

module.exports = {
  v3,
  v4
};