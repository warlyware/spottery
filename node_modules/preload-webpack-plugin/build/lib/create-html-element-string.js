"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _stringify = _interopRequireDefault(require("@babel/runtime/core-js/json/stringify"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _entries = _interopRequireDefault(require("@babel/runtime/core-js/object/entries"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var assert = require('assert');

function createHTMLElementString(_ref) {
  var elementName = _ref.elementName,
      _ref$attributes = _ref.attributes,
      attributes = _ref$attributes === void 0 ? {} : _ref$attributes,
      _ref$closingTagRequir = _ref.closingTagRequired,
      closingTagRequired = _ref$closingTagRequir === void 0 ? false : _ref$closingTagRequir;
  assert(elementName, 'Please provide an element name.');
  assert(!/\W/.test(elementName), 'The element name contains invalid characters.');
  var attributeStrings = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator2.default)((0, _entries.default)(attributes).sort()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          attributeName = _step$value[0],
          attributeValue = _step$value[1];

      if (attributeValue === '') {
        attributeStrings.push(attributeName);
      } else {
        attributeStrings.push(`${attributeName}=${(0, _stringify.default)(attributeValue)}`);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var elementString = `<${elementName}`;

  if (attributeStrings.length > 0) {
    elementString += ' ' + attributeStrings.join(' ');
  }

  elementString += '>';

  if (closingTagRequired) {
    elementString += `</${elementName}>`;
  }

  return elementString;
}

module.exports = createHTMLElementString;