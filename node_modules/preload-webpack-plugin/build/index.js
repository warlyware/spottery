"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _set = _interopRequireDefault(require("@babel/runtime/core-js/set"));

var _values = _interopRequireDefault(require("@babel/runtime/core-js/object/values"));

var _keys = _interopRequireDefault(require("@babel/runtime/core-js/object/keys"));

var _assign = _interopRequireDefault(require("@babel/runtime/core-js/object/assign"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var assert = require('assert');

var createHTMLElementString = require('./lib/create-html-element-string');

var defaultOptions = require('./lib/default-options');

var determineAsValue = require('./lib/determine-as-value');

var doesChunkBelongToHTML = require('./lib/does-chunk-belong-to-html');

var extractChunks = require('./lib/extract-chunks');

var insertLinksIntoHead = require('./lib/insert-links-into-head');

var PreloadPlugin =
/*#__PURE__*/
function () {
  function PreloadPlugin(options) {
    (0, _classCallCheck2.default)(this, PreloadPlugin);
    this.options = (0, _assign.default)({}, defaultOptions, options);
  }

  (0, _createClass2.default)(PreloadPlugin, [{
    key: "addLinks",
    value: function addLinks(webpackVersion, compilation, htmlPluginData) {
      var _this = this;

      assert(webpackVersion in doesChunkBelongToHTML, `An invalid webpackVersion was supplied. Supported values: ${(0, _keys.default)(doesChunkBelongToHTML)}.`);
      var options = this.options; // Bail out early if we're configured to exclude this HTML file.

      if (options.excludeHtmlNames.includes(htmlPluginData.plugin.options.filename)) {
        return htmlPluginData;
      }

      var extractedChunks = extractChunks({
        compilation,
        optionsInclude: options.include
      });
      var htmlChunks = options.include === 'allAssets' ? // Handle all chunks.
      extractedChunks : // Only handle chunks imported by this HtmlWebpackPlugin.
      extractedChunks.filter(function (chunk) {
        return doesChunkBelongToHTML[webpackVersion]({
          chunk,
          compilation,
          htmlAssetsChunks: (0, _values.default)(htmlPluginData.assets.chunks)
        });
      }); // Flatten the list of files.

      var allFiles = htmlChunks.reduce(function (accumulated, chunk) {
        return accumulated.concat(chunk.files);
      }, []);
      var uniqueFiles = new _set.default(allFiles);
      var filteredFiles = (0, _toConsumableArray2.default)(uniqueFiles).filter(function (file) {
        return !_this.options.fileWhitelist || _this.options.fileWhitelist.some(function (regex) {
          return regex.test(file);
        });
      }).filter(function (file) {
        return !_this.options.fileBlacklist || _this.options.fileBlacklist.every(function (regex) {
          return !regex.test(file);
        });
      }); // Sort to ensure the output is predictable.

      var sortedFilteredFiles = filteredFiles.sort();
      var links = [];
      var publicPath = compilation.outputOptions.publicPath || '';
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator2.default)(sortedFilteredFiles), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var file = _step.value;
          var href = `${publicPath}${file}`;
          var attributes = {
            href,
            rel: options.rel
          }; // If we're preloading this resource (as opposed to prefetching),
          // then we need to set the 'as' attribute correctly.

          if (options.rel === 'preload') {
            attributes.as = determineAsValue({
              href,
              optionsAs: options.as
            }); // On the off chance that we have a cross-origin 'href' attribute,
            // set crossOrigin on the <link> to trigger CORS mode. Non-CORS
            // fonts can't be used.

            if (attributes.as === 'font') {
              attributes.crossorigin = '';
            }
          }

          var linkElementString = createHTMLElementString({
            attributes,
            elementName: 'link'
          });
          links.push(linkElementString);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      htmlPluginData.html = insertLinksIntoHead({
        links,
        html: htmlPluginData.html
      });
      return htmlPluginData;
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      var _this2 = this;

      if ('hooks' in compiler) {
        compiler.hooks.compilation.tap(this.constructor.name, function (compilation) {
          compilation.hooks.htmlWebpackPluginBeforeHtmlProcessing.tapAsync(_this2.constructor.name, function (htmlPluginData, callback) {
            try {
              callback(null, _this2.addLinks('v4', compilation, htmlPluginData));
            } catch (error) {
              callback(error);
            }
          });
        });
      } else {
        compiler.plugin('compilation', function (compilation) {
          compilation.plugin('html-webpack-plugin-before-html-processing', function (htmlPluginData, callback) {
            try {
              callback(null, _this2.addLinks('v3', compilation, htmlPluginData));
            } catch (error) {
              callback(error);
            }
          });
        });
      }
    }
  }]);
  return PreloadPlugin;
}();

module.exports = PreloadPlugin;